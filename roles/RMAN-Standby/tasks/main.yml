---
# - include_vars: secrets.yml
#   no_log: True

- name: Check the LOG_MODE
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the check_logmode.sql file
    copy: 
      src: check_logmode.sql
      dest: "{{ oracle_tmp }}/check_logmode.sql"
  - name: check the logmode
    command: "sqlplus / as sysdba @{{ oracle_tmp }}/check_logmode.sql"
    register: logmode
    failed_when: '"NOARCHIVELOG" in logmode.stdout_lines'
  when: inventory_hostname == master_node
  
- name: Create tnsnames.ora if not exists
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  file:
    path: "{{ oracle_home }}/network/admin/tnsnames.ora"
    state: touch

- name: Add TNSNAMES In RMAN- Source Server
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Add target details in TNS
    lineinfile:
      path: "{{ oracle_home }}/network/admin/tnsnames.ora"
      line: "{{ TARGET_DB_NAME }} = 
                  (DESCRIPTION =
                  (ADDRESS_LIST =
                  (ADDRESS = (PROTOCOL = TCP)(HOST = {{ ansible_play_hosts[1] }})(PORT = 1521))
                  )
                  (CONNECT_DATA =
                  (ORACLE_SID = {{ TARGET_DB_NAME }})
                  (UR = A)
                  )
                  ) # line added by Ansible"
  - name: Add source details in TNS
    lineinfile:
      path: "{{ oracle_home }}/network/admin/tnsnames.ora"
      line: "{{ Source_DB_NAME }} = 
                  (DESCRIPTION =
                  (ADDRESS_LIST =
                    (ADDRESS = (PROTOCOL = TCP)(HOST = {{ ansible_play_hosts[0] }})(PORT = 1521))
                  )
                  (CONNECT_DATA =
                  (ORACLE_SID = {{ Source_DB_NAME }})
                  (UR = A)
                  )
                  ) # line added by Ansible"

- name: Static Listener Configuration and Reload listener-Target Server
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
    - name: Static Listener Configuration
      lineinfile:
        path: "{{ oracle_grid_home }}/network/admin/listener.ora"
        line: "SID_LIST_LISTENER =
                        (SID_LIST =
                          (SID_DESC =
                            (ORACLE_HOME = {{ oracle_home }})
                            (SID_NAME = {{ TARGET_DB_NAME }})
                          )
                        ) # line added by Ansible"
                        
    - name: Reload the lister-Target Server
      command: lsnrctl reload
  when: inventory_hostname != master_node

- name: Create a Primary database setup
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the Primary_database_setup.sql file
    template: 
      src: Primary_database_setup.j2
      dest: "{{ oracle_tmp }}/Primary_database_setup.sql"

  - name: Create spfile
    command: "sqlplus / as sysdba @{{ oracle_tmp }}/Primary_database_setup.sql"
  when: inventory_hostname == master_node

- name: Create a pfile-Source Server
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the create-pfile.sql file
    copy: 
      src: create-pfile.sql
      dest: "{{ oracle_tmp }}/create-pfile.sql"

  - name: Create spfile
    command: "sqlplus / as sysdba @{{ oracle_tmp }}/create-pfile.sql"
  when: inventory_hostname == master_node

- name: Copy pfile to local
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  fetch:
    src: '{{ oracle_home }}/dbs/{{ file }}'
    dest: .
  loop:
  - 'init{{ Source_DB_NAME }}.ora'
  - 'orapw{{ Source_DB_NAME }}'
  loop_control:
    loop_var: file
  when: inventory_hostname == master_node

- name: Copy from local to target
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  copy:
    src: './{{ ansible_play_hosts[0] }}/{{ oracle_home }}/dbs/{{ file }}'
    dest: '{{ oracle_home }}/dbs'
  loop:
  - 'init{{ Source_DB_NAME }}.ora'
  - 'orapw{{ Source_DB_NAME }}'
  loop_control:
    loop_var: file
  when: inventory_hostname != master_node 

- name: Create controlfile
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the standby_controlfile.sql file
    template: 
      src: Pstandby_controlfile.j2
      dest: "{{ oracle_tmp }}/standby_controlfile.sql"

  - name: Create controlfile by sqlplus
    command: "sqlplus / as sysdba @{{ oracle_tmp }}/standby_controlfile.sql"
  when: inventory_hostname == master_node

- name: Copy controlfile to local
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  fetch:
    src: '{{ oracle_tmp }}/db_stby.ctl'
    dest: .
  when: inventory_hostname == master_node

- name: Copy controlfile from local to target
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  copy:
    src: './{{ ansible_play_hosts[0] }}/{{ oracle_tmp }}/db_stby.ctl'
    dest: '{{ oracle_tmp }}/db_stby.ctl'
  when: inventory_hostname != master_node

- name: create adump dir
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  file:
    path: "{{ oracle_base }}/admin/{{ Source_DB_NAME }}/adump"
    state: directory
  when: inventory_hostname != master_node

- name: Entry for the new database
  lineinfile:
    path: /etc/oratab
    line: '{{ TARGET_DB_NAME }}:{{ oracle_home }}:N		# line added by Agent'
  when: inventory_hostname != master_node

- name: Check the LOG_MODE
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the startup_nomount.sql file
    copy: 
      src: startup_nomount.sql
      dest: "{{ oracle_tmp }}/startup_nomount.sql"
  - name: check the logmode
    command: "sqlplus / as sysdba @{{ oracle_tmp }}/startup_nomount.sql"
  when: inventory_hostname != master_node

- name: Copy duplicate_database.sql and duplicate Database
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the duplicate_database.sql file
    template: 
      src: duplicate_database.j2
      dest: "{{ oracle_tmp }}/duplicate_database.sql"
  - name: duplicate Database
    command: "rman target sys/{{ sourec_db_password }}@{{ Source_DB_NAME }} auxiliary sys/{{ target_db_password }}@{{ TARGET_DB_NAME }} @{{ oracle_tmp }}/duplicate_database.sql"
  when: inventory_hostname != master_node

- name: standby database disconnect
  become: yes
  become_user: '{{ oracle_user }}'
  environment: "{{ ora_user_env }}"
  block:
  - name: Copy the disconnect_session.sql file
    copy: 
      src: disconnect_session.sql
      dest: "{{ oracle_tmp }}/disconnect_session.sql"
  - name: check the logmode
    command: "sqlplus / as sysdba @{{ oracle_tmp }}/disconnect_session.sql"
  when: inventory_hostname != master_node