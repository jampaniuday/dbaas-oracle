
- include_tasks: unzip_ojvm.yml

- name: get db details
  command: grep ":{{ oracle_base }}.*:" /etc/oratab
  register: db_details
  ignore_errors: yes
  changed_when: False

- name: create db_list
  set_fact:
    db_list: "{{ db_list }} + [ '{{ item | regex_replace('^([^:]*).*','\\1') }}' ]"
  loop: "{{ db_details.stdout_lines }}"

- debug:
    var: db_list

- name: get oracle grid home
  shell: "ps -ef | grep ohasd | grep {{ install_base }}/{{ grid_version }}/ |  grep -v grep | awk -F ' ' '{ print $8 }'"
  register: oracle_ohasd_process

- name: set grid home
  set_fact:
    oracle_grid_home: "{{ oracle_ohasd_process.stdout | regex_replace('/bin/ohasd.bin', '') }}"

- fail:
    msg: oracle grid is not running
  when: oracle_grid_home == ""

- name: get asm grid sid
  shell:  ps -ef | grep smon | grep asm | grep -v grep | awk '{ print $8 }'
  register: ps_grep_smon
  changed_when: False

- name: set asm_sid of grid
  set_fact:
    oracle_grid_sid: "{{ ps_grep_smon.stdout | regex_replace('asm_smon_(.*)', '\\1') }}"

- include_role:
    name: oracle_admin
    tasks_from: stop_crs.yml
  vars:
    oracle_home: "{{ oracle_grid_home }}"
    oracle_sid: "{{ oracle_grid_sid }}"

- name: copy the response file
  copy:
    src: "ocm_rsp"
    dest: "{{ oracle_tmp }}/{{ ojvm_patch }}/ocm.rsp"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0755

- include_tasks: install_ojvm_patch.yml
  loop: "{{ db_list }}"
  when: oracle_db != "no_sid"
  loop_control:
    loop_var: oracle_db

- include_role:
    name: oracle_admin
    tasks_from: start_crs.yml
  vars:
    oracle_home: "{{ oracle_grid_home }}"
    oracle_sid: "{{ oracle_grid_sid }}"

- name: start CRS
  environment: "{{ ora_user_env }}"
  command: "{{ oracle_home }}/bin/crsctl start {{ crs_type }}"
#  when: inventory_hostname == master_node

- name: Wait for CRS to start
  pause:
    seconds: 180

- name: Get oracle Database Home
  shell: "awk -F : 'NF > 1 {print $2}' /etc/oratab |grep -v grid" 
  register: db_home_oratab

- name: Set Oracle Home 
  set_fact: 
     db_home: "{{ db_home_oratab.stdout_lines }}"

- name: Get Database name
  shell: "{{ oracle_home }}/bin/srvctl status database -thishome | grep unique | awk -F : '{print $2}'"
  register: db_name_info

- debug: var=db_name_info

- name: Set Database name
  set_fact:
     db_name: "{{ db_name_info.stdout_lines }}"

- include_tasks: datapatch.yml
  loop: "{{ db_name.stdout_lines }}"
  loop_control:
    loop_var: db_detail
  when: patch_type == 'RDBMS'

#- include_tasks: apply_data_patch.yml
#  when: inventory_hostname == master_node
