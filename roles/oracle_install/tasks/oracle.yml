---

- name: install oracle
  environment: "{{ ora_user_env }}"
  shell: |
    su - {{ oracle_user }} -c "{{ oracle_tmp }}/database/runInstaller -silent -force -ignoreSysPreReqs -responseFile {{ oracle_tmp }}/db_install.rsp" 2>{{ oracle_tmp }}/db_stderr.err >{{ oracle_tmp }}/db_stdout.out &
    sleep 30
    while true
    do 
      c=$(ps -ef | grep -v grep | grep db_install.rsp | grep java | wc -l)
      [ $c -eq 0 ] && break
      sleep 10
    done
  args:
    executable: /bin/bash
    creates: "{{ oracle_home }}/bin/sqlplus"
  when: inventory_hostname == master_node

- name: get db install stdout
  command: "cat {{ oracle_tmp }}/db_stdout.out"
  register: db_install
  when: inventory_hostname == master_node

- name: general oracle post-installation
  command: "{{ oracle_base }}/oraInventory/orainstRoot.sh"
  when: 'oracle_base + "/oraInventory/orainstRoot.sh" in hostvars[master_node]["db_install"]["stdout"]'

- name: execute root.sh script
  block:
  - name: db-specific oracle post-installation (Master)
    command: "{{ oracle_home }}/root.sh"
    when: inventory_hostname == master_node
    tags: root_script

  - name: db-specific oracle post-installation (Remaining)
    command: "{{ oracle_home }}/root.sh"
    when: inventory_hostname == item
    loop: "{{ cluster_nodes[1:] }}"
    tags: root_script
  when: 'oracle_home + "/root.sh" in hostvars[master_node]["db_install"]["stdout"]'

- name: run db configTool (12c R1 only)
  environment: "{{ ora_user_env }}"
  shell: |
    su - {{ oracle_user }} -c "{{ oracle_home }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_tmp }}/db_configTool.rsp" 2>{{ oracle_tmp }}/db_config_stderr.err >{{ oracle_tmp }}/db_config_stdout.out &
    sleep 30
    while true
    do 
      c=$(ps -ef | grep -v grep | grep db_configTool.rsp | grep java | wc -l)
      [ $c -eq 0 ] && break
      sleep 10
    done
  args:
    executable: /bin/bash
  when: 
  - inventory_hostname == master_node
  - oracle_version | regex_replace ('^([0-9]{1,2}.[0-9]{1,}.[0-9]{1,})(.*)$','\g<1>') == "12.1.0"
  - install_mode == "INSTALL_DB_AND_CONFIG"

- name: configure oracle for 12c only
  environment: "{{ ora_user_env }}"
  shell: |
    su - {{ oracle_user }} -c "{{ oracle_tmp }}/database/runInstaller -silent -executeConfigTools -responseFile {{ oracle_tmp }}/db_install.rsp" 2>{{ oracle_tmp }}/config_db_stderr.err >{{ oracle_tmp }}/config_db_stdout.out &
    sleep 30
    while true
    do 
      c=$(ps -ef | grep -v grep | grep db_install.rsp | grep java | wc -l)
      [ $c -eq 0 ] && break
      sleep 10
    done
  args:
    executable: /bin/bash
  when: 
  - inventory_hostname == master_node
  - oracle_version | regex_replace ('^([0-9]{1,2}.[0-9]{1,}.[0-9]{1,})(.*)$','\g<1>') == "12.2.0"

- name: touch tnsnames.ora
  file: path={{ oracle_home }}/network/admin/tnsnames.ora state=touch owner={{ oracle_user }}
  when: install_mode == "INSTALL_DB_SWONLY"

- name: start the listener
  become: yes
  become_user : "{{ oracle_user }}"
  environment: "{{ ora_user_env }}" 
  command: "{{ oracle_home }}/bin/lsnrctl start"
  ignore_errors: yes

- name: start the enterprise manager web console
  become: yes
  become_user : "{{ oracle_user }}"
  environment: "{{ ora_user_env }}" 
  command: "{{ oracle_home }}/bin/emctl start dbconsole"
  ignore_errors: yes
  when: oracle_em

- name: open listener port for rhel 7
  block:
    - name: open firewall ports (1521/tcp) for the connector
      firewalld: port=1521/tcp state=enabled permanent=yes
    - name: restart firewall
      service: name=firewalld state=restarted
  when: ansible_distribution_major_version == "7"

- name: open listener port for rhel 6
  block:
    - name: allow connector port (1521/tcp) access
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 1521
        jump: ACCEPT
    - name: save iptables settings
      command: "service iptables save"
  when: ansible_distribution_major_version == "6"