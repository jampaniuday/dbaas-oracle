---

- import_role:
    name: oracle_api_services
    tasks_from: gi_checklist_update.yml
  vars:
    update_gi_cklist_body:
      - { key: checklist_type , value: "Pre-check GI" }
      - { key: gi_install_status, value: "PENDING"}

- include: copy_archives.yml

- name: get cvuqdisk package name
  find:
    paths: "{{ oracle_tmp }}/grid/rpm"
    file_type: file
    patterns: cvuqdisk*
    use_regex: yes
  register: cvuqdisk_package
  when: grid_install_mode != "UPGRADE"

- name: install cvuqdisk package
  yum: 
    name: "{{ cvuqdisk_package.files[0].path }}"
    state: present
  when: grid_install_mode != "UPGRADE"

- name: check whether ssh key exist
  stat:
    path: "{{ oracle_home }}/.ssh/id_rsa"
  register: is_priv_key_exist
  become: yes
  become_user: oracle      

- name: generate ssh keys 
  command: ssh-keygen -q -b 4096 -t rsa -f {{ oracle_home }}/.ssh/id_rsa -N "" -C ""
  when: is_priv_key_exist.stat.exists ==  False
  become: yes
  become_user: oracle

- name: get the public key
  command: cat {{ oracle_home }}/.ssh/id_rsa.pub
  register: public_key
  no_log: True
  become: yes
  become_user: oracle

- name: put public key in authorized_keys 
  authorized_key:
    user: oracle
    state: present
    key: "{{ hostvars[item]['public_key']['stdout'] }}"
  no_log: True  
  when: inventory_hostname != item
  loop: "{{ cluster_nodes }}"

- name: ssh user equivalency
  block:
    - name: install expect if needed
      yum:
        name: expect
        state: present

    - name: copy in ssh_user_setup expect script
      template:
          src: ssh_user_setup.j2
          dest: "{{ oracle_tmp }}/ssh_user_setup.sh"
          mode: 0755

    - name: execute ssh_user_setup script
      command: "{{ oracle_tmp }}/ssh_user_setup.sh"
      
  when: inventory_hostname == master_node and (grid_install_mode == "CRS_CONFIG" or grid_install_mode == "CRS_SWONLY")

- include: run_cluvfy.yml
  tags:
    - cluvfy
  when: inventory_hostname == master_node and grid_install_mode != "UPGRADE"

- name: get asm disk paths - {{ asm_disk_group }}
  find:
    paths: "{{ asm_disk_location }}"
    file_type: any
    patterns: "{% if ansible_distribution == 'RedHat' -%}ora--dg--{{ asm_disk_group | lower }}*
      {%- else -%}{{ asm_disk_group }}*
      {%- endif %}"
    use_regex: no
  register: asm_disk_paths_find_result

- name: get asm disk paths - {{ asm_ocr_group }}
  find:
    paths: "{{ asm_disk_location }}"
    file_type: any
    patterns: "{% if ansible_distribution == 'RedHat' -%}ora--dg--{{ asm_ocr_group | lower }}*
      {%- else -%}{{ asm_ocr_group }}*
      {%- endif %}"
    use_regex: no
  register: asm_ocr_paths_find_result

- name: set cluster_nodes_table
  set_fact:
    cluster_nodes_table: "{{ cluster_nodes_table | default([]) }} + [ '{{ item }}:{{ item | regex_replace('([^.]*)(.*)','\\1-vip\\2')}}' ]"
  with_items: "{{ cluster_nodes }}"

- include_tasks: set_net_string.yml
  when: inventory_hostname == master_node and (grid_install_mode == "CRS_CONFIG" or grid_install_mode == "CRS_SWONLY" or grid_install_mode == "UPGRADE")

- include: prep_rsp_file.yml
  when: inventory_hostname == master_node

- include: grid_install.yml
