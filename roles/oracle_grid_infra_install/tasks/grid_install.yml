---

- import_role:
    name: oracle_api_services
    tasks_from: gi_checklist_update.yml
  vars:
    update_gi_cklist_body:
      - { key: checklist_type , value: "9" }
      - { key: gi_install_status, value: "IN PROGRESS"}
  tags:
  - apex_api

- block:
  - name: install grid
    environment: "{{ ora_user_env }}"
    shell: |
      su - {{ oracle_user }} -c "{{ oracle_tmp }}/grid/runInstaller -silent -force -ignorePrereq -ignoreSysPreReqs -responseFile {{ oracle_tmp }}/grid_install.rsp" 2>&1 | tee {{ oracle_tmp }}/grid_stdout.out &
      sleep 30
      while true
      do 
        c=$(ps -ef | grep -v grep | grep grid_install.rsp | grep java | wc -l)
        [ $c -eq 0 ] && break
        sleep 10
      done
    args:
      executable: /bin/bash
      creates: "{{ oracle_grid_home }}/cfgtoollogs/configToolAllCommands"
    register: grid_install
    failed_when: '"[FATAL]" in grid_install.stdout'
    when: inventory_hostname == master_node

  - name: general oracle post-installation
    command: "{{ oracle_base }}/oraInventory/orainstRoot.sh"
    register: orainstroot_script
    when: 
    - grid_install_mode != "UPGRADE"
    - 'oracle_base + "/oraInventory/orainstRoot.sh" in hostvars[master_node]["grid_install"]["stdout"]'

  - name: save orainstroot script stdout
    copy:
      dest: "{{ oracle_tmp }}/orainstroot_script_stdout.out"
      content: "{{ orainstroot_script.stdout }}"

  - name: save orainstroot script  stderr
    copy:
      dest: "{{ oracle_tmp }}/orainstroot_script_stderr.err"
      content: "{{ orainstroot_script.stderr }}" 


  - name: execute root.sh script
    block:
    - name: db-specific oracle post-installation (Master)
      command: "{{ oracle_grid_home }}/root.sh"
      register: root_script
      when: inventory_hostname == master_node
      tags: root_script

    - name: db-specific oracle post-installation (Remaining)
      command: "{{ oracle_grid_home }}/root.sh"
      register: root_script
      when: inventory_hostname == item
      loop: "{{ cluster_nodes[1:] }}"
      tags: root_script
    when: 'oracle_grid_home + "/root.sh" in hostvars[master_node]["grid_install"]["stdout"]'

  - name: save root script stdout
    copy:
      dest: "{{ oracle_tmp }}/root_script_stdout.out"
      content: "{{ root_script.stdout }}"

  - name: save root script  stderr
    copy:
      dest: "{{ oracle_tmp }}/root_script_stderr.err"
      content: "{{ root_script.stderr }}" 

  - name: run grid configTool
    environment: "{{ ora_user_env }}"
    shell: |
      su - {{ oracle_user }} -c "{{ oracle_grid_home }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_tmp }}/grid_configTool.rsp" 2>{{ oracle_tmp }}/config_stderr.err >{{ oracle_tmp }}/config_stdout.out &
      sleep 30
      while true
      do 
        c=$(ps -ef | grep -v grep | grep grid_configTool.rsp | grep java | wc -l)
        [ $c -eq 0 ] && break
        sleep 10
      done
    args:
      executable: /bin/bash
    when: inventory_hostname == master_node
  
  rescue:
  - import_role:
      name: oracle_api_services
      tasks_from: gi_checklist_update.yml
    vars:
      update_gi_cklist_body:
        - { key: gi_install_status, value: "FAILED"}
    tags:
    - apex_api
  
  - name: Install Failed
    fail:
      msg: GI Install Failed

- import_role:
    name: oracle_api_services
    tasks_from: gi_checklist_update.yml
  vars:
    update_gi_cklist_body:
      - { key: gi_install_status, value: "SUCCESSFUL"}
  tags:
  - apex_api