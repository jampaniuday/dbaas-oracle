---

- name: install grid
  environment: "{{ ora_user_env }}"
  shell: |
    su - {{ oracle_user }} -c "{{ oracle_tmp }}/grid/runInstaller -silent -force -ignorePrereq -ignoreSysPreReqs -responseFile {{ oracle_tmp }}/grid_install.rsp" 2>{{ oracle_tmp }}/grid_stderr.err >{{ oracle_tmp }}/grid_stdout.out &
    sleep 30
    while true
    do 
      c=$(ps -ef | grep -v grep | grep grid_install.rsp | grep java | wc -l)
      [ $c -eq 0 ] && break
      sleep 10
    done
  args:
    executable: /bin/bash
    creates: "{{ oracle_grid_home }}/cfgtoollogs/configToolAllCommands"
  when: inventory_hostname == master_node

- name: get grid install stdout
  command: "cat {{ oracle_tmp }}/grid_stdout.out"
  register: grid_install

- name: general oracle post-installation
  command: "{{ oracle_base }}/oraInventory/orainstRoot.sh"
  ignore_errors: yes
  when: 
  - grid_install_mode != "UPGRADE"
  - 'oracle_base + "/oraInventory/orainstRoot.sh" in grid_install.stdout'

- name: execute root.sh script
  block:
  - name: db-specific oracle post-installation (Master)
    command: "{{ oracle_grid_home }}/root.sh"
    ignore_errors: yes
    when: inventory_hostname == master_node
    tags: root_script

  - name: db-specific oracle post-installation (Remaining)
    command: "{{ oracle_grid_home }}/root.sh"
    when: inventory_hostname == item
    loop: "{{ cluster_nodes[1:] }}"
    tags: root_script
  when: 'oracle_grid_home + "/root.sh" in grid_install.stdout'

- name: run grid configTool
  environment: "{{ ora_user_env }}"
  shell: |
    su - {{ oracle_user }} -c "{{ oracle_grid_home }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_tmp }}/grid_configTool.rsp" 2>{{ oracle_tmp }}/config_stderr.err >{{ oracle_tmp }}/config_stdout.out &
    sleep 30
    while true
    do 
      c=$(ps -ef | grep -v grep | grep grid_configTool.rsp | grep java | wc -l)
      [ $c -eq 0 ] && break
      sleep 10
    done
  args:
    executable: /bin/bash
  when: inventory_hostname == master_node