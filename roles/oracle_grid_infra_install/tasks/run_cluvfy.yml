---

- name: set cvu_config settings
  lineinfile: 
    path: "{{ oracle_tmp }}/cluster_verify/cv/admin/cvu_config"
    regexp: "^{{ item.regex }}"
    line: "{{ item.regex }}={{ item.value }}"
  with_items:
    - { regex: CV_RAW_CHECK_ENABLED, value: 'FALSE' }

- name: run cluvfy
  become: yes
  become_user: "{{ oracle_user }}"
  environment: "{{ ora_user_env }}"
  command: "{{ oracle_tmp }}/cluster_verify/bin/cluvfy stage -pre crsinst -n {{ cluster_nodes | join(',') }} -fixup -verbose"
  ignore_errors: yes
  register: cluvfy_results_1

- name: save cluvfy 1st stdout
  copy:
    dest: "{{ oracle_tmp }}/cluvfy_1st_stdout.out"
    content: "{{ cluvfy_results_1.stdout }}"

- name: save cluvfy 1st stderr
  copy:
    dest: "{{ oracle_tmp }}/cluvfy_1st_stderr.err"
    content: "{{ cluvfy_results_1.stderr }}"

- name: run fixup and re-check
  block:
  - name: get cluvfy version
    become: yes
    become_user: "{{ oracle_user }}"
    environment: "{{ ora_user_env }}"
    command: "{{ oracle_tmp }}/cluster_verify/bin/cluvfy -version"
    register: cluvfy_version

  - name: check for runfixup.sh
    find:
      paths: "/tmp/CVU_{{ cluvfy_version.stdout | regex_replace('^(.*) Build.*', '\\1') }}_oracle"
      file_type: file
      patterns: runfixup.sh
      use_regex: no
    register: fixup_script

  - name: execute runfixup.sh
    command: "{{ fixup_script.files[0].path }}"
    ignore_errors: yes
    register: fixup_results
    when: fixup_script.matched == 1

  - name: save runfixup.sh stdout
    copy:
      dest: "{{ oracle_tmp }}/fixup_stdout.out"
      content: "{{ fixup_results.stdout }}"
    when: fixup_results is defined

  - name: save runfixup.sh stderr
    copy:
      dest: "{{ oracle_tmp }}/fixup_stderr.err"
      content: "{{ fixup_results.stderr }}"
    when: fixup_results is defined
    
  - name: run cluvfy again
    become: yes
    become_user: "{{ oracle_user }}"
    environment: "{{ ora_user_env }}"
    command: "{{ oracle_tmp }}/cluster_verify/bin/cluvfy stage -pre crsinst -n {{ cluster_nodes | join(',') }}"
    ignore_errors: yes
    register: cluvfy_results_2

  - name: save cluvfy 2nd stdout
    copy:
      dest: "{{ oracle_tmp }}/cluvfy_2nd_stdout.out"
      content: "{{ cluvfy_results_2.stdout }}"

  - name: save cluvfy 2nd stderr
    copy:
      dest: "{{ oracle_tmp }}/cluvfy_2nd_stderr.err"
      content: "{{ cluvfy_results_2.stderr }}"
    
  - name: check failures
    block: 
    - name: cleanup cluvfy 2nd stdout
      replace:
        path: "{{ oracle_tmp }}/cluvfy_2nd_stdout.out"
        regexp: 'FAILED'
        replace: 'failed'
        before: 'Failures were encountered during execution.*'

    - name: ignore known cluvfy failures
      lineinfile:
        path: "{{ oracle_tmp }}/cluvfy_2nd_stdout.out"
        regexp: ".*{{ item }}.*FAILED"
        line: "{{ item }} IGNORED"
      with_items: "{{ known_cluvfy_issues }}"

    - name: Any non-ignorable failures?
      command: "grep FAILED {{ oracle_tmp }}/cluvfy_2nd_stdout.out"
      register: cluvfy_failures
      changed_when: false
      failed_when: cluvfy_failures.stdout_lines | length > 0
    when: cluvfy_results_2.rc != 0
  when: cluvfy_results_1.rc != 0

- import_role:
    name: oracle_api_services
    tasks_from: gi_checklist_update.yml
  vars:
    update_gi_cklist_body:
      - { key: cluster_verify , value: "Y" }
  tags:
  - apex_api