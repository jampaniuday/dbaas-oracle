---

- name: create directory for features
  file:
    group: "{{ oracle_group }}"
    owner: "{{ oracle_user }}"
    mode: 0755
    path: "{{ oracle_features_tmp }}/features"
    state: directory

- name: Put necessary processing file on server
  copy:
    src: "{{ feature_files }}"
    dest: "{{ oracle_features_tmp }}/features"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0755
  loop: "{{ feature_files }}"
  loop_control:
    loop_var: feature_files
  changed_when: false

- include_tasks: get_db_name.yml

# - name: check oracle_db_name is defined or not
#   debug:
#     msg: The Variable oracle_db_name is not defined
#   when: oracle_db_name is undefined
#
# - name: set oracle_home
#   block:
#     - name: get oracle_sid
#       shell: ps -ef | grep smon | grep -v grep | awk '{ print $8 }'
#       register: ps_grep_smon
#       changed_when: False
#
#     - name: set oracle_sid
#       set_fact:
#         oracle_sid: "{{ ps_grep_smon.stdout | regex_replace('ora_smon_(.*)', '\\1') }}"
# #      when: oracle_db_name > length=0
#
#     - name: get db details
#       shell: grep "^{{ oracle_sid }}:" /etc/oratab | awk 'NR == 1'
#       ignore_errors: yes
#       changed_when: false
#       register: db_details
#
#     - name: set oracle_home
#       set_fact:
#         oracle_home: "{{ db_details.stdout | regex_replace('^[^:]*:([^:]*).*', '\\1') }}"
#
#     - fail:
#         msg: Database named {{ oracle_sid }} doesn't exists'
#       when: oracle_home == ""
#   when: oracle_context != 'grid'
#   ignore_errors: yes

- debug:
    msg: "{{ oracle_sid }}"

- debug:
    msg: "{{ oracle_home }}"

- debug:
    msg: "{{ db_details }}"

- name: task only for db'
  block:
    - name: get installed products
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: "sqlplus -S -NOLOGINTIME  / as sysdba @{{ oracle_features_tmp }}/features/product_stats.sql"
      register: product_stats
      changed_when: false
      # timeout need to be implemented

    - debug:
        msg: "{{ product_stats }}"

    - name: get installed features
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME  / as sysdba @{{ oracle_features_tmp }}/features/feature_stats.sql
      register: feature_stats
      changed_when: false


- name: remove directory for features
  file:
    path: "{{ oracle_features_tmp }}/features"
    state: absent
