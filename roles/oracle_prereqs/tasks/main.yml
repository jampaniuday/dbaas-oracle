---

- include: hostname_entries.yml

# - name: check for the pv for oravg
#   stat: path="{{ oracle_pv }}"
#   register: pv

# May not be needed in Charter Env
- include: usergroups.yml

- include: filesystems.yml
  # when: pv.stat.isblk is defined

# Not sure why this was commented but may want to re-enable
#- name: check enough free space to continue 
#  assert:
#    that:
#      - item.mount == "{{ oracle_bin_fs }}" and item.size_available < 5368709120
#      - item.mount == "{{ oracle_data_fs }}" and item.size_available < 2147483648
#      - item.mount == "{{ oracle_tmp }}" and item.size_available < 5368709120
#  with_items: "{{ ansible_mounts }}"
#  ignore_errors: yes

# Unsure if we will need this
- include: packages.yml

- name: make sure the installer directory exists
  stat: path={{ oracle_tmp }}/database
  register: install_dir

# Unsure if we will need this
- include: ora_best_practices.yml

- name: set selinux
  selinux:
    policy: targeted
    state: "{{ selinux_mode }}"

#*******************************************
# THE BELOW TO BE UNCOMMENTED WHEN WE GET THE LAB ENVIRONMENT WITH ALL THE IP'S REQUIRED
#*******************************************

#- include: ethernet_config.yml
#- include: ntpd_config.yml

#--------------------------------------------

- name: check whether swap space exisits (for cloud instances)
  shell: free  | awk ' $1 == "Swap:" {print $2}'
  register: swapsize

- debug: var=swapsize.stdout

- name: create swap file (for cloud instances)
  include: swap_check.yml
  when: swapsize.stdout | int < 200000


- name: setting the fact 
  set_fact:
     failed_checks: ""

- name: check the version
  shell: echo `uname -r | awk -F. '{print $1}'`
  register: version_number

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} the linux kernel version ,"
  when: version_number.stdout | int < 3

- name: check the total memory
  shell: grep MemTotal /proc/meminfo | awk '{ print $2 }'
  register: total_memory

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} memory,"
  when: total_memory.stdout | int < 396868032

- name: check the swap size
  shell: grep SwapTotal /proc/meminfo | awk '{ print $2 }'
  register: swap_memory

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} swap size is less than 16384M for the 64GB RAM or more,"
  when: swap_memory.stdout | int < 16384 and total_memory.stdout | int > 64000000

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} swap size is less than 32768M for the 256GB RAM or more,"
  when: swap_memory.stdout < 32768 and total_memory.stdout | int > 256000000

- name: check whether ssh service is running
  shell: ps -ef| grep /usr/sbin/sshd | awk 'NR == 1 { print $2 } '
  register: process_id

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} ssh process is not running,"
  when: process_id.stdout==""

- name: check TMP directory
  shell: df -kh /tmp | awk 'NR == 2 { print $4 }' | awk -F. '{print $1}'
  register: tmp_size

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} TMP directory size should be more than 4GB,"
  when: tmp_size.stdout | int < 4

- name: check the RW permission for all 
  shell: ls -lsrta /var |grep tmp | awk '{ print$2 }'
  register: rw_permission

- name: setting the fact 
  set_fact:  
    failed_checks:  "{{ failed_checks | string }} the directory /var should have drwxrwxrwt. permission,"
  when: rw_permission.stdout!="drwxrwxrwt."


- name: unmask value checker
  shell: unmask
  register: unmask_value

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} unmask value is neither 22 or 022 or 0022,"
  when: unmask_value.stdout | int != 22  or unmask_value.stdout | int =! 022 or unmask_value.stdout | int != 0022


- name: get ulimit value
  shell: ulimit -Sn
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 2047 for ulimit -Sn,"
  when: ulimit_value.stdout | int == 2047

- name: get ulimit value
  shell: ulimit -Hn
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 2047 for ulimit -Hn,"
  when: ulimit_value.stdout | int == 65536

- name: get ulimit value
  shell: ulimit -Hu
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 2047 for ulimit -Hu,"
  when: ulimit_value.stdout | int == 16384

- name: get ulimit value
  shell: ulimit -Ss
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 2047 for ulimit -Ss,"
  when: ulimit_value.stdout | int == 10240

- name: get ulimit value
  shell: ulimit -Hs
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 2047 for ulimit -Hs,"
  when: ulimit_value.stdout == "unlimited"



- name: shell
  shell: echo {{ failed_checks }}





















  