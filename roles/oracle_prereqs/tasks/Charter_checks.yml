---

- name: setting the fact 
  set_fact:
     failed_checks: ""

- name: check the version
  shell: echo `uname -r | awk -F. '{print $1}'`
  register: version_number

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} the linux kernel version ,"
  when: version_number.stdout | int < 3

- name: check the total memory
  shell: grep MemTotal /proc/meminfo | awk '{ print $2 }'
  register: total_memory

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} no sufficient (396868032M ) memory,"
  when: total_memory.stdout | int < 396868032

- name: check the swap size
  shell: grep SwapTotal /proc/meminfo | awk '{ print $2 }'
  register: swap_memory

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} swap size is less than 16384M for the 64GB RAM or more,"
  when: swap_memory.stdout | int < 16384 and total_memory.stdout | int > 64000000

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} swap size is less than 32768M for the 256GB RAM or more,"
  when: swap_memory.stdout < 32768 and total_memory.stdout | int > 256000000

- name: check whether ssh service is running
  shell: grep /usr/sbin/sshd | wc -l
  register: process_id

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} ssh process is not running,"
  when: process_id.stdout | int != 2

- name: check TMP directory
  shell: echo `df -kh /tmp | awk 'NR == 2 { print $4 }' | awk -F 'G' '{print $1}'`
  register: tmp_size

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} TMP directory size should be more than 4GB, {{ tmp_size.stdout | int | round }}"
  when: tmp_size.stdout | int | round < 4

- name: check the RW permission for all 
  shell: ls -lsrta /var |grep tmp | awk '{ print$2 }'
  register: rw_permission

- name: setting the fact 
  set_fact:  
    failed_checks:  "{{ failed_checks | string }} the directory /var should have drwxrwxrwt. permission,"
  when: rw_permission.stdout!="drwxrwxrwt."


- name: umask value checker
  shell: umask
  register: umask_value

- name: setting the fact 
  set_fact:  
    failed_checks: "{{ failed_checks | string }} unmask value is neither 22 or 022 or 0022,"
  when: umask_value.stdout | int != 22 or umask_value.stdout | int != 022 or umask_value.stdout | int != 0022


- name: get ulimit value
  shell: ulimit -Sn
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 2047 for ulimit -Sn,"
  when: ulimit_value.stdout | int != 2047

- name: get ulimit value
  shell: ulimit -Hn
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 65536 for ulimit -Hn,"
  when: ulimit_value.stdout | int != 65536

- name: get ulimit value
  shell: ulimit -Hu
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 16384 for ulimit -Hu,"
  when: ulimit_value.stdout | int != 16384

- name: get ulimit value
  shell: ulimit -Ss
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be 10240 for ulimit -Ss,"
  when: ulimit_value.stdout | int != 10240

- name: get ulimit value
  shell: ulimit -Hs
  register: ulimit_value

- name: check the ulimit value
  set_fact:
   failed_checks: "{{ failed_checks | string }} ulimit value should be unlimited for ulimit -Hs,"
  when: ulimit_value.stdout != "unlimited"
  
- name: fail the tasks if the pre-requsites are not satisfied
  fail: 
    msg: The following pre-requesties are not met {{ failed_checks | string }}
  when: failed_checks!=""