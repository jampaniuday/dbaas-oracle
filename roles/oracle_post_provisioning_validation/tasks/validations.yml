---
- name: host checklist post update for post provisioning validation
  include_tasks: host_checklist_post_update.yml
  vars:
    chklst_json_body:
      new_entry: True
      host_name: "{{ ansible_hostname }}"
      db_name: "{{ oracle_db_name }}"
      ticket_ref: "{{ ticket_ref }}"
      #ID: "{{ checklist_id }}"
      checklist_type: "Post Provisioning Validations For DB"
      checklist_category: POST VALIDATION
      post_build_status: "STARTED"
      task_desc: Post validation
  tags:
  - apex_api

- name: check oracle user
  user:
    name: oracle
    state: present
  check_mode: yes
  changed_when: False
  register: oracle_user_check
  when: oracle_context=='grid'

- name: check oracle groups
  group:
    name: "{{ group_name }}"
    state: present
  check_mode: yes
  changed_when: False
  register: oracle_groups
  loop:
  - oinstall
  - dba
  loop_control:
    loop_var: group_name
  when: oracle_context == 'grid'

- include_tasks: adrci_setup.yml
  when: oracle_context == 'grid'

- include_tasks: cleanup_files_setup.yml
  when: oracle_context == 'grid'

- name: task only for database
  block:
    - name: Read the oratab file
      shell: cat /etc/oratab
      ignore_errors: yes
      register: oratab

    - name: Check the oratab file for onsid
      when: oratab.stdout.find('onsid') != -1
      debug: msg="Onsid exists"

    - name: check the ACFS file system for value of u01 less than 294GB
      shell: df --output=avail /u01 | tail -n 1
      register: u01_available_storage

    - name: fail if the  value is less than 294GB
      fail:
        msg: "The storage is less than 294GB"
      when: u01_available_storage.stdout|int < 137665437499392

    - name: check for the directory structure of scripts/logs/ctl
      stat:
        path: /scripts/logs/ctl
      register: ctl_file_status

    - debug:
        msg: "The file /scripts/logs/ctl exists"
      when: ctl_file_status.stat.exists

    - name: check for SetDB.sh file exist or not
      stat:
        path: /SetDB.sh
      register: SetDB_file_status

    - debug:
        msg: "The file SetDB.sh exists"
      when: SetDB_file_status.stat.exist
  when: oracle_context == 'grid'

- name:
  debug:
    msg: "{{ ora_user_env }}"


- name: task only for database
  block:
    - name: execute tablespace_size sql file
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME  / as sysdba @{{ sql_file_path }}/verify_tablespace.sql
      register: tablespace_names_result
      changed_when: false

    - name: execute verify alter sql script
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_alter_profile.sql
      register: verify_alter_profile_result
      changed_when: false

    - name: execute verify created profile sql script
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_created_profile.sql
      register: verify_created_profile_result
      changed_when: false

    - name: execute sql script to verify snapshot interval
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_snapshot_interval.sql
      register: verify_snapshot_interval_result
      changed_when: false

    - name: execute sql script to verify parallel force
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_parallel_force.sql
      register: verify_parallel_force_result
      changed_when: false

    - name: execute sql script to verify recyclebin force
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_recyclebin_status.sql
      register: verify_recyclebin_status_result
      changed_when: false

    - name: execute sql script to modify block tracking
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_block_tracking.sql
      register: verify_block_tracking_result
      changed_when: false

    - name: execute sql script to verify db files
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_db_files.sql
      register: verify_db_files_result
      changed_when: false


    - name: execute sql script to verify redo logs
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_redo_logs.sql
      register: verify_redo_logs_result
      changed_when: false

    - name: execute sql script to verify redo logs
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_redo_logs.sql
      register: verify_redo_logs_result
      changed_when: false

    - name: execute sql script to verify dba directories
      become: yes
      become_user: "{{ oracle_user }}"
      environment: "{{ ora_user_env }}"
      shell: sqlplus -S -NOLOGINTIME / as sysdba @{{ sql_file_path }}/verify_dba_directories.sql
      register: verify_dba_directories_result
      changed_when: false

    - name: run post_check_audit_purge.sql script
      become: yes
      become_user: '{{ oracle_user }}'
      environment: "{{ ora_user_env }}"
      command: "sqlplus / as sysdba @{{ oracle_base }}/admin/scripts/post_check_audit_purge.sql"
      register: post_check_audit_purge_result
      failed_when: '"ERROR" in post_check_audit_purge_result.stdout'

    - name: run Password_Verification_function.sql script
      become: yes
      become_user: '{{ oracle_user }}'
      environment: "{{ ora_user_env }}"
      command: "sqlplus / as sysdba @{{ oracle_base }}/admin/scripts/Password_Verification_function.sql"
      register: Password_Verification_function_result
      failed_when: '"ORA-" in Password_Verification_function_result.stdout'
    - name: run archive log mod script
      become: yes
      become_user: '{{ oracle_user }}'
      environment: "{{ ora_user_env }}"
      command: "sqlplus / as sysdba @{{ oracle_base }}/admin/scripts/archive_log_mode.sql"
      register: archive_log_mode_result
    - name: check for database service running status
      become: yes
      become_user: '{{ oracle_user }}'
      environment: "{{ ora_user_env }}"
      command: "sqlplus / as sysdba @{{ oracle_base }}/admin/scripts/verify_database_service.sql"
      register: verify_database_service_status
    - name: check for memory status of SGA/PGA, shared_pool, db_cache_size, large_pool_size, streams_pool_size
      become: yes
      become_user: '{{ oracle_user }}'
      environment: "{{ ora_user_env }}"
      command: "sqlplus / as sysdba @{{ oracle_base }}/admin/scripts/verify_memory_values.sql"
      register: verify_memory_status


  when: oracle_home != "" and oracle_context == 'database'

- name: db checklist post update for post provisioning validation
  import_tasks: host_checklist_post_update.yml
  vars:
    chklst_json_body:
      new_entry: true
      host_name: "{{ ansible_hostname }}"
      db_name: "{{ oracle_db_name }}"
      ticket_ref: "{{ ticket_ref }}"
      #ID: "{{ checklist_id }}"
      checklist_type: "Post Provisioning Validations for DB"
      checklist_category: POST VALIDATION
      post_build_status: "SUCCESSFUL"
      task_desc: Post validation
  tags:
  - apex_api

- set_fact:
    exp_disk_size: "{% if ansible_mounts | json_query('[?mount == `/u01/app/oracle/exp`]') == [] -%}unmounted
                    {%- else -%}{{ ansible_mounts | json_query('[?mount == `/u01/app/oracle/exp`].size_total|[0]') }}
                    {%- endif -%}"

- set_fact:
    ggs_disk_size: "{% if ansible_mounts | json_query('[?mount == `/u01/app/oracle/ggs`]') == [] -%}unmounted
                    {%- else -%}{{ ansible_mounts | json_query('[?mount == `/u01/app/oracle/ggs`].size_total|[0]') }}
                    {%- endif -%}"
  when: golden_gate_check


- set_fact:
    checklist_grid:
    - name: oracle user
      expected_value: "900"
      actual_value: "{{ oracle_user_check.uid }}"
      status: "{% if oracle_user_check.uid != 900 -%}FAILED
                {%- else -%}PASSED
                {%- endif %}"
    - name: oracle groups
      expected_value: 900, 901
      actual_value: "{{ oracle_groups | json_query('results[?name == `oinstall`] | [0].gid') }},
                      {{ oracle_groups | json_query('results[?name == `dba`] | [0].gid') }}"
      status: "{% if oracle_groups | json_query('results[?name == `oinstall`] | [0].gid') != 900 or
                      oracle_groups | json_query('results[?name == `dba`] | [0].gid') != 901 -%}FAILED
                {%- else -%}PASSED
                {%- endif %}"
    - name: EXP Mount (in GiB)
      expected_value: 295
      actual_value: "{{ (exp_disk_size | int / 1024 | pow(3)) | round | int }}"
      status: "{% if exp_disk_size == 'unmounted' or
                  (exp_disk_size | int / 1024 | pow(3)) | round | int < 295 -%}FAILED
               {%- else -%}PASSED
               {%- endif -%}"
    - name: GG Mount (in GiB)
      expected_value: "{% if golden_gate_check -%}300
                       {%- else -%}
                       {%- endif -%}"
      actual_value: "{% if golden_gate_check -%}{{ (ggs_disk_size | int / 1024 | pow(3)) | round | int }}
                       {%- else -%}
                       {%- endif -%}"
      status: "{% if not golden_gate_check -%}NOT_CHECKED
               {%- elif ggs_disk_size == 'unmounted' or
                       (ggs_disk_size | int / 1024 | pow(3)) | round | int < 300 -%}FAILED
               {%- else -%}PASSED
               {%- endif -%}"
  when: oracle_context == 'grid'

- set_fact:
    checklist_database:
    - name: results of validation done using sql queries
      expected_value: ""
      actual_value:
          - check_type: "tablespace name and size"
            value: "{{ tablespace_names_result.stdout_lines | default('')}}"
          - check_type: "alter profile"
            value: "{{ verify_alter_profile_result.stdout_lines | default('')}}"
          - check_type: "created profile"
            value: "{{ verify_created_profile_result.stdout_lines | default('') }}"
          - check_type: "snapshot interval"
            value: "{{ verify_snapshot_interval_result.stdout_lines | default('')}}"
          - check_type: "verify parallel force"
            value: "{{ verify_parallel_force_result.stdout_lines | default('')}}"
          - check_type: "verify recycle bin status"
            value: "{{ verify_recyclebin_status_result.stdout_lines | default('')}}"
          - check_type: "verify block tracking"
            value: "{{ verify_block_tracking_result.stdout_lines | default('')}}"
          - check_type: "verify db files"
            value: "{{ verify_db_files_result.stdout_lines | default('')}}"
          - check_type: "verify redo logs"
            value: "{{ verify_redo_logs_result.stdout_lines | default('') }}"
          - check_type: "verify dba directories"
            value: "{{ verify_dba_directories_result.stdout_lines | default('') }}"
          - check_type: "post check audit purge result"
            value: "{{ post_check_audit_purge_result.stdout_lines | default('') }}"
          - check_type: "Password Verification function result"
            value: "{{ Password_Verification_function_result.stdout_lines | default('') }}"
          - check_type: "archive log mode result"
            value: "{{ archive_log_mode_result.stdout_lines | default('') }}"
          - check_type: "verify database service status"
            value: "{{ verify_database_service_status.stdout_lines | default('') }}"
          - check_type: "verify memory status"
            value: "{{ verify_memory_status.stdout_lines | default('') }}"
      status: ""
  when: oracle_context == 'database'

-  debug:
    var: checklist_grid
   when: oracle_context == 'grid'

-  debug:
    var: checklist_database
   when: oracle_context == 'database'

- name: debug oracle_context
  debug:
    msg: "{{oracle_context}}"

#- name: store the result in a json
#  copy:
#    dest: "{% if oracle_context == 'grid' -%}{{ oracle_tmp }}/grid_post_validaton_result.json
#              {%- elif oracle_context == 'database' -%}{{ oracle_tmp }}/{{ oracle_db_name }}_post_validaton_result.json
#              {%- endif %}"
#    content: "{{ checklist }}"

- name: store the result  of grid checklist  to a json
  copy:
    dest: "{{ oracle_tmp }}/grid_post_validaton_result.json"
    content: "{{ checklist_grid }}"
  when: oracle_context == 'grid'

- name: store the result  of database checklist  to a json
  copy:
    dest: "{{ oracle_tmp }}/{{ oracle_db_name }}_post_validaton_result.json"
    content: "{{ checklist_database }}"
  when: oracle_context == 'database'

#- name: Create json template for verify result
#  template:
#    src: post_validaton_result_list.json.j2
#    dest: "{{ oracle_tmp }}/{{ oracle_db_name }}_post_validaton_result_list.json"

- name: upload log for post provisioning validation
  include_tasks: upload_log.yml
  vars:
    logfile_path: "{% if oracle_context == 'grid' -%}{{ oracle_tmp }}/grid_post_validaton_result.json
              {%- elif oracle_context == 'database' -%}{{ oracle_tmp }}/{{ oracle_db_name }}_post_validaton_result.json
              {%- endif %}"
    log_file_desc: post validation
  tags:
  - apex_api

- name: host checklist post update for post provisioning validation
  include_tasks: host_checklist_post_update.yml
  vars:
    chklst_json_body:
      new_entry: true
      host_name: "{{ ansible_hostname }}"
      db_name: "{{ oracle_db_name }}"
      ticket_ref: "{{ ticket_ref }}"
      #ID: "{{ checklist_id }}"
      checklist_type: "Post Provisioning Validations"
      checklist_category: POST Validation
      post_build_status: "FAILED"
      task_desc: post VALIDATION
  when: checklist | json_query('[?status == `FAILED`]') | length > 1
  tags:
  - apex_api

- name: db checklist post update for post provisioning validation
  include_tasks: host_checklist_post_update.yml
  vars:
    chklst_json_body:
      new_entry: true
      host_name: "{{ ansible_hostname }}"
      db_name: "{{ oracle_db_name }}"
      ticket_ref: "{{ ticket_ref }}"
      #ID: "{{ checklist_id }}"
      checklist_type: "Post Provisioning Validations"
      checklist_category: POST VALIDATION
      post_build_status: "SUCCESSFUL"
      task_desc: post validation
  when: checklist | json_query('[?status == `FAILED`]') | length == 0
  tags:
  - apex_api

- name: Check for Post validation Failures
  fail:
    msg: "{% if checklist | json_query('[?status == `FAILED`]') | length == 1 -%}You have 1 failed check
          {%- else -%}You have {{ checklist | json_query('[?status == `FAILED`]') | length }} failed checks
          {%- endif %}"
  when: checklist | json_query('[?status == `FAILED`]') | length > 1
  tags: postval_fail
